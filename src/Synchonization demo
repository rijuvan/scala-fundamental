import scala.collection.mutable._
 
class WorkerBee2 (val iterations : Int, var bins : ArrayBuffer[Int]) extends Runnable {
 
    def run() : Unit = {
        for(i <- 0 until iterations) {
            for (j <- 0 until bins.length) {
                // This compiles but misses some iterations:
                bins.update(j, bins(j) + 1)
            }
        }
    }
 
}
 
object SyncBufferExample {
 
    val iter = 100000
    val bins = new ArrayBuffer[Int] with SynchronizedBuffer[Int]
    for(i<-0 until 256) bins += 0
 
    def do_work() : Unit = {
        val g = new ThreadGroup("WorkerBees")
        val t1 = new Thread(g, new WorkerBee2(iter / 2, bins))
        val t2 = new Thread(g, new WorkerBee2(iter / 2, bins))
        t1.start
        t2.start
        t1.join
        t2.join     
    }
     
    def verify_work() : Unit = {
        var invalid = 0
        for (i <- 0 until 256) {
            if (bins(i) != iter)
                invalid += (iter - bins(i))
        }
        if (invalid == 0)
            println("Bins are valid.")
        else
            printf("Bins are NOT valid. %d iterations missing.\n", invalid)
    }
 
    def main(args: Array[String]) : Unit = {
        do_work
        verify_work
    }
 
}
SyncExample.scalaScala
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
class WorkerBee (val iterations : Int, var bins : Array[Int]) extends Runnable {
 
    def update(index: Int) : Unit = synchronized {
        bins(index) += 1 
    }
 
    def run() : Unit = {
        for(i <- 0 until iterations) {
            for (j <- 0 until bins.length) {
/*                // This works:
                bins.synchronized {
                    bins(j) += 1
                }
*/                
 
                // This compiles but misses some iterations:
                this.synchronized {
                    bins(j) += 1
                }
 
/*                // This compiles but misses some iterations:
              update(j)
*/              
            }
        }
    }
    
}
 
object SyncExample {
 
    val iter = 100000
    val bins : Array[Int] = new Array[Int](256)
    for (i <- 0 until bins.length) bins(i) = 0
 
    def do_work() : Unit = {
        val g = new ThreadGroup("WorkerBees")
        val t1 = new Thread(g, new WorkerBee(iter / 2, bins))
        val t2 = new Thread(g, new WorkerBee(iter / 2, bins))
        t1.start
        t2.start
        t1.join
        t2.join     
    }
     
    def verify_work() : Unit = {
        var invalid = 0
        for (i <- 0 until bins.length) {
            if (bins(i) != iter) {
                invalid += (iter - bins(i))
            }
        }
        if (invalid == 0)
            println("Bins are valid.")
        else
            printf("Bins are NOT valid. %d iterations missing.\n", invalid)
    }
 
    def main(args: Array[String]) : Unit = {
        do_work
        verify_work
    }
 
}